Vagrant.configure("2") do |config|

# end

# Vagrant.configure("2") do |config|
#   config.vm.hostname = "fedora30"
  config.vm.hostname = "ubuntu1804"
  config.vm.box_check_update = true
  # set auto_update to false, if you do NOT want to check the correct
  # additions version when booting this machine  config.vbguest.auto_update = false

  config.vbguest.auto_update = false
  # config.vbguest.iso_path = "#{ENV['HOME']}/Downloads/VBoxGuestAdditions.iso"
  # or an URL:
  # config.vbguest.iso_path = "http://company.server/VirtualBox/%{version}/VBoxGuestAdditions.iso"
  # or relative to the Vagrantfile:
  # config.vbguest.iso_path = "../relative/path/to/VBoxGuestAdditions.iso"
######  config.vbguest.iso_path = "C:/Program Files/Oracle/VirtualBox/VBoxGuestAdditions.iso"

  # do NOT download the iso file from a webserver
  config.vbguest.no_remote = true

  config.vm.define "ubuntu1804" do |ubuntu|
    ubuntu.vm.box = "ubuntu/bionic64"
    ubuntu.vm.box_version = "v20191218.0.0"

    ubuntu.disksize.size = '150GB'
    ubuntu.vm.provider "virtualbox" do |vb|
      vb.name = "ubuntu1804-v0.1"
#      vb.memory = 8192
      vb.memory = 4096
#      vb.cpus = 4
      vb.cpus = 2
      vb.customize ["modifyvm", :id, "--cpuexecutioncap", "90"]
##      if !File.exist?(swap_disk_2)
##        vb.customize ['createhd', '--filename', swap_disk_2, '--size', 6 * 1024]
##      end
##      vb.customize ['storageattach', :id, '--storagectl', 'SATAController', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', swap_disk_2]
#    vb.customize [
#      "storagectl", :id,
#      "--name", "SATAController",
#      "--controller", "IntelAHCI",
#      "--portcount", "2",
#      "--hostiocache", "on"
#  ]
#    vb.customize [
#      "storageattach", :id,
#      "--storagectl", "SATAController",
#      "--port", "0",
#      "--device", "0",
#      "--type", "hdd",
#      "--discard", "on",
#      "--nonrotational", "on"   #,
##      "--medium", "#{ENV["HOME"]}/VirtualBox VMs/Vagrant Test Boxes/#{virtualbox.name}/ubuntu.vdi"
#  ]
#    vb.customize [
#      "storageattach", :id,
#      "--storagectl", "SATAController",
#      "--port", "1",
#      "--device", "0",
#      "--type", "dvddrive",
##      "--discard", "on",
##      "--nonrotational", "on"   #,
#      "--medium", "emptydrive"
#      "--medium", "C:/Program Files/Oracle/VirtualBox/VBoxGuestAdditions.iso"
#  ]
    end

    ubuntu.vm.network "private_network", ip: "10.2.83.210"
    ubuntu.vm.network "forwarded_port", guest: 22, host: 21022, protocol: "tcp", auto_correct: true        #SSH
    ubuntu.vm.network "forwarded_port", guest: 80, host: 21080, protocol: "tcp", auto_correct: true        #HTTP
#    ubuntu.vm.synced_folder "~/Documents/", "/code", create: false
#    ubuntu.vm.synced_folder "D:/fedora/EXCP/ibi_ui", "/media/sf_ibi_ui", create: true, automount: true
#    ubuntu.vm.synced_folder "D:/Shared/fedora/EXCP/ibi_ui", "/media/sf_ibi_ui", create: false, automount: true
#    ubuntu.vm.synced_folder "D:/Shared/fedora/EXCP/ibi_ui_release", "/media/sf_ibi_ui_release", create: false, automount: true
#    ubuntu.vm.synced_folder "D:/Shared/fedora/EXAN/analytics-api", "/media/sf_analytics-api", create: false, automount: true

#     # ADD SHARE FOLDER IBI
#     $mount_sharedfolders_ibi = <<-SCRIPT
#       set -e
#       ### Redacted ###
#       echo "vboxsf" >> /etc/modules
#       echo "media_sf_ibi_ui /media/sf_ibi_ui vboxsf defaults 0 0" >> /etc/fstab
#       echo "media_sf_ibi_ui_release /media/sf_ibi_ui_release vboxsf defaults 0 0" >> /etc/fstab
#       echo "media_sf_analytics_api /media/sf_analytics-api vboxsf defaults 0 0" >> /etc/fstab
#       mount -t vboxsf media_sf_ibi_ui /media/sf_ibi_ui
#       mount -t vboxsf media_sf_ibi_ui_release /media/sf_ibi_ui_release
#       mount -t vboxsf media_sf_analytics-api /media/sf_analytics-api
#       ### Redacted ###
#     SCRIPT
# #    ubuntu.vm.provision "MOUNTING Shared Folder EXAN Repos", type: "shell", inline: $mount_sharedfolders_ibi, privileged: true

    ubuntu.vm.boot_timeout = 300
    ubuntu.vm.graceful_halt_timeout = 300
    ubuntu.ssh.insert_key = true

    # Copy ssh public key from host and append it to authorized_keys in guest
    ubuntu.vm.provision "ssh_keys_provision-1", type: "file",
      source: "~/.ssh/id_rsa.pub", destination: "/tmp/host_id_rsa.pub"
    ubuntu.vm.provision "ssh_keys_provision-2", type: "shell",
      inline: "cat /tmp/host_id_rsa.pub >> /home/vagrant/.ssh/authorized_keys"
    # Copy ssh public key from host and append it to authorized_keys in guest
    ubuntu.vm.provision "ssh_keys_provision-3", type: "file",
      source: "files/id_rsa_vagrant", destination: "/tmp/id_rsa_vagrant"
    ubuntu.vm.provision "ssh_keys_provision-4", type: "file",
      source: "files/id_rsa_vagrant.pub", destination: "/tmp/id_rsa_vagrant.pub"
    ubuntu.vm.provision "ssh_keys_provision-4-1", type: "shell",
      inline: "cat /tmp/id_rsa_vagrant.pub >> /home/vagrant/.ssh/authorized_keys"

#     # Installing Docker Engine
#     $install_docker_1 = <<-SCRIPT
# #      sudo apt-get update
# #      sudo apt-get upgrade -y
#       sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
#       sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
#       sudo apt-get update
#       sudo apt-get upgrade -y
#       sudo apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual  linux-headers-generic linux-headers-$(uname -r)
#       sudo apt-get install -y apt-transport-https ca-certificates ssl-cert curl software-properties-common
#       sudo apt-get install -y docker-ce=18.06.0~ce~3-0~ubuntu
# #      sudo sed -i -e 's/#DOCKER_OPTS=\"--dns 8.8.8.8 --dns 8.8.4.4\"/DOCKER_OPTS=\"--insecure-registry 10.12.228.6\"/g' /etc/default/docker
#       sudo sed -i -e 's/#DOCKER_OPTS=\"--dns 8.8.8.8 --dns 8.8.4.4\"/DOCKER_OPTS=\"--insecure-registry 192.168.240.174:65000 --insecure-registry 10.12.228.6\"/g' /etc/default/docker
#       sudo cat /etc/default/docker
#       sudo service docker restart
#       echo "DOCKER ENGINE INSTALLED"
#     SCRIPT
# #    ubuntu.vm.provision "INSTALLING DOCKER ENGINE", type: "shell", inline: $install_docker_1, privileged: false


  end
  config.vm.define "ubuntu1804", autostart: false
end